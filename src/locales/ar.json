{
  "home": {
    "name": "محمد الطيب",
    "developer": "Full Stack Developer and Designer UI UX",
    "switchLanguage": "en"
  },
  "skills":{
    "skills": "المهارات",
    "All": "الكل",
    "Frontend": "الواجهة الأمامية",
    "Backend": "الواجهة الخلفية",
    "UI/UX": "واجهة المستخدم/تجربة المستخدم"
  },
  
  "myWorks": {
    "portfolio": "أعمالي",
    "view": "عرض"
  },
  "categories": {
    "All": "الكل",
    "Frontend": "الواجهة الأمامية",
    "Backend": "الواجهة الخلفية",
    "UI/UX": "واجهة المستخدم/تجربة المستخدم"
  },
  "header": {
    "logoText": "أر 7",
    "navHome": "الرئيسية",
    "navSkills": "المهارات",
    "navBlog" : "المدونة",
    "navWorks": "أعمالي",
    "navContact": "اتصل بي"
  },
"footer": {
    "footerText": "جميع الحقوق محفوظة ",
    "footerLink": "محمد الطيب"

  },

  
  
    "tutorial": {
      "heading": "البدء مع React",
      "intro": "ReactJS هو مكتبة JavaScript لبناء واجهات المستخدم. يسمح لك React ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
      "steps": "للبدء في استخدام React، يمكنك اتباع الخطوات التالية:",
      "environmentSetup": "إعداد بيئة التطوير:",
      "createReactApp": "إنشاء تطبيق React جديد باستخدام الأمر التالي:",
      "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
      "runApp": "تشغيل التطبيق باستخدام الأمر:",
      "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام React.",
      "example1": "مثال على تطبيق React بسيط:",
      "example2": "مثال آخر:"
    },
    
      "flutterTutorial": {
        "heading": "البدء مع Flutter",
        "intro": "Flutter هو إطار عمل لبناء واجهات المستخدم، يتيح لك بناء تطبيقات رائعة وجميلة للهواتف المحمولة والويب من نفس الشيفرة. يتميز Flutter بتصميم واجهة مستخدم سريعة وجميلة ويوفر تجربة تطوير فعالة.",
        "steps": "للبدء في استخدام Flutter، يمكنك اتباع الخطوات التالية:",
        "installFlutter": "قم بتثبيت Flutter على نظام التشغيل الخاص بك باستخدام الأمر التالي:",
        "checkInstallation": "تحقق من تثبيت Flutter بتشغيل الأمر:",
        "createFlutterApp": "إنشاء تطبيق Flutter جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك بدء تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Flutter.",
        "example1": "مثال على تطبيق Flutter بسيط:"
      },
      "vueTutorial": {
        "heading": "البدء مع Vue",
        "intro": "Vue.js هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Vue ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Vue، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createVueApp": "إنشاء تطبيق Vue جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Vue.",
        "example1": "مثال على تطبيق Vue بسيط:",
        "example2": "مثال آخر:"
      },
      "angularTutorial": {
        "heading": "البدء مع Angular",
        "intro": "Angular هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Angular ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Angular، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createAngularApp": "إنشاء تطبيق Angular جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Angular.",
        "example1": "مثال على تطبيق Angular بسيط:",
        "example2": "مثال آخر:"
      },
      "svelteTutorial": {
        "heading": "البدء مع Svelte",
        "intro": "Svelte هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Svelte ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Svelte، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createSvelteApp": "إنشاء تطبيق Svelte جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Svelte.",
        "example1": "مثال على تطبيق Svelte بسيط:",
        "example2": "مثال آخر:"
      },
      "emberTutorial": {
        "heading": "البدء مع Ember",
        "intro": "Ember.js هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Ember ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Ember، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createEmberApp": "إنشاء تطبيق Ember جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Ember.",
        "example1": "مثال على تطبيق Ember بسيط:",
        "example2": "مثال آخر:"
      },
      "polymerTutorial": {
        "heading": "البدء مع Polymer",
        "intro": "Polymer هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Polymer ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Polymer، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createPolymerApp": "إنشاء تطبيق Polymer جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Polymer.",
        "example1": "مثال على تطبيق Polymer بسيط:",
        "example2": "مثال آخر:"
      },
      "mithrilTutorial": {
        "heading": "البدء مع Mithril",
        "intro": "Mithril.js هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك Mithril ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام Mithril، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createMithrilApp": "إنشاء تطبيق Mithril جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام Mithril.",
        "example1": "مثال على تطبيق Mithril بسيط:",
        "example2": "مثال آخر:"
      },
      "reactNativeTutorial": {
        "heading": "البدء مع React Native",
        "intro": "React Native هو إطار عمل JavaScript لبناء واجهات المستخدم. يسمح لك React Native ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام React Native، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createReactNativeApp": "إنشاء تطبيق React Native جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام React Native.",
        "example1": "مثال على تطبيق React Native بسيط:",
        "example2": "مثال آخر:"
      },
      "reactTutorial": {
        "heading": "البدء مع React",
        "intro": "ReactJS هو مكتبة JavaScript لبناء واجهات المستخدم. يسمح لك React ببناء تطبيقات واجهة مستخدم فعالة وقابلة للصيانة باستخدام مفهوم الأشجار المكونة والتحديثات الفعالة.",
        "steps": "للبدء في استخدام React، يمكنك اتباع الخطوات التالية:",
        "environmentSetup": "إعداد بيئة التطوير:",
        "createReactApp": "إنشاء تطبيق React جديد باستخدام الأمر التالي:",
        "navigateToFolder": "التنقل إلى مجلد التطبيق الجديد:",
        "runApp": "تشغيل التطبيق باستخدام الأمر:",
        "editFiles": "الآن، يمكنك البدء في تحرير ملفات التطبيق والعمل على تطوير تطبيقك الخاص باستخدام React.",
        "example1": "مثال على تطبيق React بسيط:",
        "example2": "مثال آخر:"
      },
      "flutterVsReactNative": {
        "heading": "مقارنة Flutter و React Native",
        "intro": "Flutter و React Native هما إطاران عمل شائعان لبناء تطبيقات الهاتف المحمول. يتميز كل منهما بميزاته الفريدة ويتمتع بمجتمع كبير من المطورين. في هذا المقال، سنقارن Flutter و React Native من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "performance": "الأداء",
        "performanceContent": "يتميز Flutter بأداء أفضل من React Native. يتم تجميع تطبيقات Flutter إلى ملفات ثنائية، بينما يتم تجميع تطبيقات React Native إلى ملفات JavaScript. يتم تحويل ملفات JavaScript إلى ملفات ثنائية أثناء تشغيل التطبيق. هذا يعني أن تطبيقات Flutter تعمل بشكل أسرع من تطبيقات React Native.",
        "navigation": "التنقل",
        "navigationContent": "يتميز Flutter بنظام تنقل مدمج، بينما يتطلب React Native منك استخدام مكتبة تنقل منفصلة. يعني هذا أن Flutter يوفر تجربة تطوير أكثر سلاسة من React Native.",
        "documentation": "التوثيق",
        "documentationContent": "يتميز Flutter بتوثيق أفضل من React Native. يحتوي Flutter على موقع ويب مخصص للتوثيق، بينما يعتمد React Native على موقع ويب مخصص للتوثيق.",
        "community": "المجتمع",
        "communityContent": "يتميز Flutter بمجتمع أكبر من React Native. يحتوي Flutter على مجتمع كبير من المطورين، بينما يحتوي React Native على مجتمع أصغر من المطورين.",
        "thirdPartyIntegration": "التكامل مع واجهات برمجة التطبيقات الخارجية",
        "thirdPartyIntegrationContent": "يتميز Flutter بتكامل أفضل مع واجهات برمجة التطبيقات الخارجية من React Native. يحتوي Flutter على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية، بينما يعتمد React Native على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية.",
        "iosAndAndroidCompatibility": "التوافق مع منصات iOS و Android",
        "iosAndAndroidCompatibilityContent": "يتميز Flutter بتوافق أفضل مع منصات iOS و Android من React Native. يحتوي Flutter على مكتبة مخصصة للتكامل مع منصات iOS و Android، بينما يعتمد React Native على مكتبة مخصصة للتكامل مع منصات iOS و Android.",
        "standardDevelopmentToolsCompatibility": "التوافق مع الأدوات القياسية للتطوير",
        "standardDevelopmentToolsCompatibilityContent": "يتميز Flutter بتوافق أفضل مع الأدوات القياسية للتطوير من React Native. يحتوي Flutter على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير، بينما يعتمد React Native على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير.",
        "integratedDevelopmentEnvironmentCompatibility": "التوافق مع أدوات التطوير المتكاملة",
        "integratedDevelopmentEnvironmentCompatibilityContent": "يتميز Flutter بتوافق أفضل مع أدوات التطوير المتكاملة من React Native. يحتوي Flutter على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة، بينما يعتمد React Native على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة."
      },
      "reactVsAngular": {
        "heading": "مقارنة React و Angular",
        "intro": "React و Angular هما إطاران عمل شائعان لبناء تطبيقات الويب. يتميز كل منهما بميزاته الفريدة ويتمتع بمجتمع كبير من المطورين. في هذا المقال، سنقارن React و Angular من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "performance": "الأداء",
        "performanceContent": "يتميز React بأداء أفضل من Angular. يتم تجميع تطبيقات React إلى ملفات ثنائية، بينما يتم تجميع تطبيقات Angular إلى ملفات JavaScript. يتم تحويل ملفات JavaScript إلى ملفات ثنائية أثناء تشغيل التطبيق. هذا يعني أن تطبيقات React تعمل بشكل أسرع من تطبيقات Angular.",
        "navigation": "التنقل",
        "navigationContent": "يتميز React بنظام تنقل مدمج، بينما يتطلب Angular منك استخدام مكتبة تنقل منفصلة. يعني هذا أن Reactيوفر تجربة ت طوير أكثر سلاسة من Angular.",
        "documentation": "التوثيق",
        "documentationContent": "يتميز React بتوثيق أفضل من Angular. يحتوي React على موقع ويب مخصص للتوثيق، بينما يعتمد Angular على موقع ويب مخصص للتوثيق.",
        "community": "المجتمع",

        "communityContent": "يتميز React بمجتمع أكبر من Angular. يحتوي React على مجتمع كبير من المطورين، بينما يحتوي Angular على مجتمع أصغر من المطورين.",
        "thirdPartyIntegration": "التكامل مع واجهات برمجة التطبيقات الخارجية",
        "thirdPartyIntegrationContent": "يتميز React بتكامل أفضل مع واجهات برمجة التطبيقات الخارجية من Angular. يحتوي React على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية، بينما يعتمد Angular على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية.",
        "iosAndAndroidCompatibility": "التوافق مع منصات iOS و Android",
        "iosAndAndroidCompatibilityContent": "يتميز React بتوافق أفضل مع منصات iOS و Android من Angular. يحتوي React على مكتبة مخصصة للتكامل مع منصات iOS و Android، بينما يعتمد Angular على مكتبة مخصصة للتكامل مع منصات iOS و Android.",
        "standardDevelopmentToolsCompatibility": "التوافق مع الأدوات القياسية للتطوير",
        "standardDevelopmentToolsCompatibilityContent": "يتميز React بتوافق أفضل مع الأدوات القياسية للتطوير من Angular. يحتوي React على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير، بينما يعتمد Angular على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير.",
        "integratedDevelopmentEnvironmentCompatibility": "التوافق مع أدوات التطوير المتكاملة",
        "integratedDevelopmentEnvironmentCompatibilityContent": "يتميز React بتوافق أفضل مع أدوات التطوير المتكاملة من Angular. يحتوي React على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة، بينما يعتمد Angular على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة."
      },
      "flutterVsReact": {
        "heading": "مقارنة Flutter و React",
        "intro": "Flutter و React هما إطاران عمل شائعان لبناء تطبيقات الويب. يتميز كل منهما بميزاته الفريدة ويتمتع بمجتمع كبير من المطورين. في هذا المقال، سنقارن Flutter و React من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "performance": "الأداء",
        "performanceContent": "يتميز Flutter بأداء أفضل من React. يتم تجميع تطبيقات Flutter إلى ملفات ثنائية، بينما يتم تجميع تطبيقات React إلى ملفات JavaScript. يتم تحويل ملفات JavaScript إلى ملفات ثنائية أثناء تشغيل التطبيق. هذا يعني أن تطبيقات Flutter تعمل بشكل أسرع من تطبيقات React.",
        "navigation": "التنقل",
        "navigationContent": "يتميز Flutter بنظام تنقل مدمج، بينما يتطلب React منك استخدام مكتبة تنقل منفصلة. يعني هذا أن Flutterيوفر تجربة ت طوير أكثر سلاسة من React.",
        "documentation": "التوثيق",
        "documentationContent": "يتميز Flutter بتوثيق أفضل من React. يحتوي Flutter على موقع ويب مخصص للتوثيق، بينما يعتمد React على موقع ويب مخصص للتوثيق.",
        "community": "المجتمع",
        "communityContent": "يتميز Flutter بمجتمع أكبر من React. يحتوي Flutter على مجتمع كبير من المطورين، بينما يحتوي React على مجتمع أصغر من المطورين.",
        "thirdPartyIntegration": "التكامل مع واجهات برمجة التطبيقات الخارجية",
        "thirdPartyIntegrationContent": "يتميز Flutter بتكامل أفضل مع واجهات برمجة التطبيقات الخارجية من React. يحتوي Flutter على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية، بينما يعتمد React على مكتبة مخصصة للتكامل مع واجهات برمجة التطبيقات الخارجية.",
        "iosAndAndroidCompatibility": "التوافق مع منصات iOS و Android",
        "iosAndAndroidCompatibilityContent": "يتميز Flutter بتوافق أفضل مع منصات iOS و Android من React. يحتوي Flutter على مكتبة مخصصة للتكامل مع منصات iOS و Android، بينما يعتمد React على مكتبة مخصصة للتكامل مع منصات iOS و Android.",
        "standardDevelopmentToolsCompatibility": "التوافق مع الأدوات القياسية للتطوير",
        "standardDevelopmentToolsCompatibilityContent": "يتميز Flutter بتوافق أفضل مع الأدوات القياسية للتطوير من React. يحتوي Flutter على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير، بينما يعتمد React على مكتبة مخصصة للتكامل مع الأدوات القياسية للتطوير.",
        "integratedDevelopmentEnvironmentCompatibility": "التوافق مع أدوات التطوير المتكاملة",
        "integratedDevelopmentEnvironmentCompatibilityContent": "يتميز Flutter بتوافق أفضل مع أدوات التطوير المتكاملة من React. يحتوي Flutter على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة، بينما يعتمد React على مكتبة مخصصة للتكامل مع أدوات التطوير المتكاملة."
      },
   




      
        "blog": {
          "react-app.title": "إنشاء تطبيق باستخدام رياكت",
          "react-app.content": "في هذا المقال، سنرشدك خلال عملية إنشاء تطبيق React من الصفر. سنغطي إعداد بيئة التطوير، إنشاء المكونات، إدارة الحالة، والتكامل مع واجهات برمجة التطبيقات الخارجية. بنهاية هذا الدليل، ستكون لديك فهم قوي لبناء تطبيقات React.",
          "flutter-app.title": "إنشاء تطبيق باستخدام فلاتر",
          "flutter-app.content": "في هذا الدليل الشامل، سنرشدك خلال عملية بناء تطبيق جوال باستخدام Flutter. سنغطي نظام الودجتات في Flutter، إدارة الحالة، والتنقل. بالإضافة إلى ذلك، ستتعلم كيفية نشر تطبيق Flutter الخاص بك على منصات iOS و Android، مما يوفر تجربة مستخدم سلسة عبر الأجهزة.",      
        "react-native-app.title": "إنشاء تطبيق باستخدام رياكت نايتف",
        "react-native-app.content": "في هذا الدليل الشامل، سنرشدك خلال عملية بناء تطبيق جوال باستخدام React Native. سنغطي نظام الودجتات في React Native، إدارة الحالة، والتنقل. بالإضافة إلى ذلك، ستتعلم كيفية نشر تطبيق React Native الخاص بك على منصات iOS و Android، مما يوفر تجربة مستخدم سلسة عبر الأجهزة.",
        "flutter-vs-react-native.title": "مقارنة Flutter و React Native",
        "flutter-vs-react-native.content": "في هذا المقال، سنقارن Flutter و React Native من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة.",
        "react-vs-angular.title": "مقارنة React و Angular",
        "react-vs-angular.content": "في هذا المقال، سنقارن React و Angular من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة.", 
        "react-vs-vue.title": "مقارنة React و Vue",
        "react-vs-vue.content": "في هذا المقال، سنقارن React و Vue من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة، والتوافق مع أدوات التطوير المتكاملة.",
        "react-vs-svelte.title": "مقارنة React و Svelte",
        "react-vs-svelte.content": "في هذا المقال، سنقارن React و Svelte من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "react-vs-ember.title": "مقارنة React و Ember",
        "react-vs-ember.content": "في هذا المقال، سنقارن React و Ember من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "react-vs-polymer.title": "مقارنة React و Polymer",
        "react-vs-polymer.content": "في هذا المقال، سنقارن React و Polymer من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة.",
        "react-vs-mithril.title": "مقارنة React و Mithril",
        "react-vs-mithril.content": "في هذا المقال، سنقارن React و Mithril من حيث الأداء، والتنقل، والتوثيق، والمجتمع، والتكامل مع واجهات برمجة التطبيقات الخارجية، والتوافق مع منصات iOS و Android، والتوافق مع الأدوات القياسية للتطوير، والتوافق مع أدوات التطوير المتكاملة."
      }
    
    
  }
  
